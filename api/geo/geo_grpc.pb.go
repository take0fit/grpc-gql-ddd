// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: api/geo/geo.proto

package geo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GeoServer_ListLocations_FullMethodName = "/newmo.api.geo.GeoServer/ListLocations"
)

// GeoServerClient is the client API for GeoServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GeoServer は地理情報を提供する gRPC Service である
type GeoServerClient interface {
	// ListLocations は地理情報サービス上の地理情報を提供する RPC である
	ListLocations(ctx context.Context, in *ListLocationsRequest, opts ...grpc.CallOption) (*ListLocationsResponse, error)
}

type geoServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGeoServerClient(cc grpc.ClientConnInterface) GeoServerClient {
	return &geoServerClient{cc}
}

func (c *geoServerClient) ListLocations(ctx context.Context, in *ListLocationsRequest, opts ...grpc.CallOption) (*ListLocationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLocationsResponse)
	err := c.cc.Invoke(ctx, GeoServer_ListLocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeoServerServer is the server API for GeoServer service.
// All implementations should embed UnimplementedGeoServerServer
// for forward compatibility
//
// GeoServer は地理情報を提供する gRPC Service である
type GeoServerServer interface {
	// ListLocations は地理情報サービス上の地理情報を提供する RPC である
	ListLocations(context.Context, *ListLocationsRequest) (*ListLocationsResponse, error)
}

// UnimplementedGeoServerServer should be embedded to have forward compatible implementations.
type UnimplementedGeoServerServer struct {
}

func (UnimplementedGeoServerServer) ListLocations(context.Context, *ListLocationsRequest) (*ListLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocations not implemented")
}

// UnsafeGeoServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeoServerServer will
// result in compilation errors.
type UnsafeGeoServerServer interface {
	mustEmbedUnimplementedGeoServerServer()
}

func RegisterGeoServerServer(s grpc.ServiceRegistrar, srv GeoServerServer) {
	s.RegisterService(&GeoServer_ServiceDesc, srv)
}

func _GeoServer_ListLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoServerServer).ListLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeoServer_ListLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoServerServer).ListLocations(ctx, req.(*ListLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeoServer_ServiceDesc is the grpc.ServiceDesc for GeoServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeoServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "newmo.api.geo.GeoServer",
	HandlerType: (*GeoServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLocations",
			Handler:    _GeoServer_ListLocations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/geo/geo.proto",
}
