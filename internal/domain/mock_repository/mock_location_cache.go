// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock_repository

import (
	"context"
	"github.com/newmohr/example/internal/domain/entity"
	"github.com/newmohr/example/internal/domain/repository"
	"sync"
)

// Ensure, that LocationCacheMock does implement repository.LocationCache.
// If this is not the case, regenerate this file with moq.
var _ repository.LocationCache = &LocationCacheMock{}

// LocationCacheMock is a mock implementation of repository.LocationCache.
//
//	func TestSomethingThatUsesLocationCache(t *testing.T) {
//
//		// make and configure a mocked repository.LocationCache
//		mockedLocationCache := &LocationCacheMock{
//			FetchListFunc: func(ctx context.Context) ([]*entity.Location, error) {
//				panic("mock out the FetchList method")
//			},
//			UpdateFunc: func(ctx context.Context, locations []*entity.Location) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedLocationCache in code that requires repository.LocationCache
//		// and then make assertions.
//
//	}
type LocationCacheMock struct {
	// FetchListFunc mocks the FetchList method.
	FetchListFunc func(ctx context.Context) ([]*entity.Location, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, locations []*entity.Location) error

	// calls tracks calls to the methods.
	calls struct {
		// FetchList holds details about calls to the FetchList method.
		FetchList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Locations is the locations argument value.
			Locations []*entity.Location
		}
	}
	lockFetchList sync.RWMutex
	lockUpdate    sync.RWMutex
}

// FetchList calls FetchListFunc.
func (mock *LocationCacheMock) FetchList(ctx context.Context) ([]*entity.Location, error) {
	if mock.FetchListFunc == nil {
		panic("LocationCacheMock.FetchListFunc: method is nil but LocationCache.FetchList was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockFetchList.Lock()
	mock.calls.FetchList = append(mock.calls.FetchList, callInfo)
	mock.lockFetchList.Unlock()
	return mock.FetchListFunc(ctx)
}

// FetchListCalls gets all the calls that were made to FetchList.
// Check the length with:
//
//	len(mockedLocationCache.FetchListCalls())
func (mock *LocationCacheMock) FetchListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockFetchList.RLock()
	calls = mock.calls.FetchList
	mock.lockFetchList.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *LocationCacheMock) Update(ctx context.Context, locations []*entity.Location) error {
	if mock.UpdateFunc == nil {
		panic("LocationCacheMock.UpdateFunc: method is nil but LocationCache.Update was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Locations []*entity.Location
	}{
		Ctx:       ctx,
		Locations: locations,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, locations)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedLocationCache.UpdateCalls())
func (mock *LocationCacheMock) UpdateCalls() []struct {
	Ctx       context.Context
	Locations []*entity.Location
} {
	var calls []struct {
		Ctx       context.Context
		Locations []*entity.Location
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
