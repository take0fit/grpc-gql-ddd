// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock_repository

import (
	"context"
	"github.com/newmohr/example/internal/domain/entity"
	"github.com/newmohr/example/internal/domain/repository"
	"sync"
)

// Ensure, that LocationRepositoryMock does implement repository.LocationRepository.
// If this is not the case, regenerate this file with moq.
var _ repository.LocationRepository = &LocationRepositoryMock{}

// LocationRepositoryMock is a mock implementation of repository.LocationRepository.
//
//	func TestSomethingThatUsesLocationRepository(t *testing.T) {
//
//		// make and configure a mocked repository.LocationRepository
//		mockedLocationRepository := &LocationRepositoryMock{
//			FetchListFunc: func(ctx context.Context) ([]*entity.Location, error) {
//				panic("mock out the FetchList method")
//			},
//		}
//
//		// use mockedLocationRepository in code that requires repository.LocationRepository
//		// and then make assertions.
//
//	}
type LocationRepositoryMock struct {
	// FetchListFunc mocks the FetchList method.
	FetchListFunc func(ctx context.Context) ([]*entity.Location, error)

	// calls tracks calls to the methods.
	calls struct {
		// FetchList holds details about calls to the FetchList method.
		FetchList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockFetchList sync.RWMutex
}

// FetchList calls FetchListFunc.
func (mock *LocationRepositoryMock) FetchList(ctx context.Context) ([]*entity.Location, error) {
	if mock.FetchListFunc == nil {
		panic("LocationRepositoryMock.FetchListFunc: method is nil but LocationRepository.FetchList was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockFetchList.Lock()
	mock.calls.FetchList = append(mock.calls.FetchList, callInfo)
	mock.lockFetchList.Unlock()
	return mock.FetchListFunc(ctx)
}

// FetchListCalls gets all the calls that were made to FetchList.
// Check the length with:
//
//	len(mockedLocationRepository.FetchListCalls())
func (mock *LocationRepositoryMock) FetchListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockFetchList.RLock()
	calls = mock.calls.FetchList
	mock.lockFetchList.RUnlock()
	return calls
}
